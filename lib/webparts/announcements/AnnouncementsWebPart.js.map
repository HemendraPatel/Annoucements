{"version":3,"sources":["webparts/announcements/AnnouncementsWebPart.ts"],"names":[],"mappings":"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","file":"webparts/announcements/AnnouncementsWebPart.js","sourcesContent":["import { Version } from '@microsoft/sp-core-library';\r\nimport {\r\n  BaseClientSideWebPart,\r\n  IPropertyPaneConfiguration,\r\n  PropertyPaneTextField\r\n} from '@microsoft/sp-webpart-base';\r\n\r\n/* Hemendra Patel - Import SP Environment Interactions */\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\n/* Hemendra Patel - Update/Import Style for calendarDate */\r\nimport styles from './Announcements.module.scss';\r\n\r\nimport * as strings from 'announcementsStrings';\r\nimport { IAnnouncementsWebPartProps } from './IAnnouncementsWebPartProps';\r\n\r\n/* Hemendra Patel - ADD Code for Sample Data If rendered on local workbench */\r\nimport MockHttpClient from './MockHttpClient';\r\nimport {\r\n  Environment,\r\n  EnvironmentType\r\n} from '@microsoft/sp-core-library';\r\n\r\nimport {\r\n  SPHttpClient,\r\n  SPHttpClientResponse\r\n} from '@microsoft/sp-http';\r\n\r\n/* Hemendra Patel - Define/Export Interface for SP List */\r\nexport interface ISPLists {\r\n    value: ISPList[];\r\n}\r\n/* Hemendra Patel - Define/Export Announcement List Columns */\r\nexport interface ISPList {\r\n    Title: string;\r\n    Id: string;\r\n    Expires: string;\r\n}\r\n\r\nexport default class AnnouncementsWebPart extends BaseClientSideWebPart<IAnnouncementsWebPartProps> {\r\n\r\n/* My Code start here */\r\n/*\r\nprivate _getListData(): Promise<ISPLists> {\r\n  return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists?$filter=Hidden eq false`, SPHttpClient.configurations.v1)\r\n    .then((response: SPHttpClientResponse) => {\r\n      return response.json();\r\n    });\r\n}\r\n*/\r\n\r\n/* Hemendra Patel - Get All SP Announcements from SP List */\r\nprivate _getListData(): Promise<ISPLists> {\r\nreturn this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists/GetByTitle('Announcements')/Items`, SPHttpClient.configurations.v1)\r\n  .then((response: SPHttpClientResponse) => {\r\n  return response.json();\r\n  });\r\n}\r\n\r\n/* Hemendra Patel - Get All Sample Announcements from Mock List */\r\nprivate _getMockListData(): Promise<ISPLists> {\r\n      return MockHttpClient.get()\r\n        .then((data: ISPList[]) => {\r\n          var listData: ISPLists = { value: data };\r\n          return listData;\r\n        }) as Promise<ISPLists>;\r\n}\r\n\r\n/* Hemendra Patel - Format Date into Month Year */\r\nprivate _getMonthYear (datestr: string): string {\r\n var months:string[];\r\n months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\n var mth: number = parseInt(datestr.substring(5, 7)) - 1;\r\n return (months[mth] + \" \" + datestr.substring(0, 4));\r\n}\r\n\r\n/* Hemendra Patel - Format Date into Day */\r\nprivate _getDay (datestr: string): string {\r\n return (datestr.substring(8, 10));\r\n}\r\n\r\n/* Hemendra Patel - Check Environment and Render Results */\r\nprivate _renderListAsync(): void {\r\n    // Local environment\r\n    if (Environment.type === EnvironmentType.Local) {\r\n      this._getMockListData().then((response) => {\r\n        this._renderList(response.value);\r\n      });\r\n    }\r\n    else if (Environment.type == EnvironmentType.SharePoint ||\r\n              Environment.type == EnvironmentType.ClassicSharePoint) {\r\n        this._getListData()\r\n        .then((response) => {\r\n          this._renderList(response.value);\r\n        });\r\n    }\r\n}\r\n\r\nprivate _renderList(items: ISPList[]): void {\r\n/*  let html: string = '';\r\n  items.forEach((item: ISPList) => {\r\n    html += `\r\n      <ul class=\"${styles.list}\">\r\n          <li class=\"${styles.listItem}\">\r\n              <span class=\"ms-font-l\">${item.Title}</span>\r\n          </li>\r\n      </ul>`;\r\n  });\r\n\r\n  const listContainer: Element = this.domElement.querySelector('#spListContainer');\r\n  listContainer.innerHTML = html;\r\n*/\r\n\r\n  let html: string = '<table width=100% border-collapse: collapse; >';\r\n  items.forEach((item: ISPList) => {\r\n    html = html + `\r\n        <tr>\r\n        <td width=10%>\r\n        <div class=\"${styles.calendarDate}\">\r\n            <strong>${this._getMonthYear(item.Expires)}</strong>\r\n            <span>${this._getDay(item.Expires)}</span>\r\n        </div>\r\n        <td>\r\n        <p class=\"ms-font-l ms-fontColor-black\">${item.Title}</p>\r\n        </td>\r\n    </tr>\r\n    `;\r\n  });\r\n  html += `</table>`;\r\n\r\n  const listContainer: Element = this.domElement.querySelector('#spListContainer');\r\n  listContainer.innerHTML = html;\r\n}\r\n\r\n/* My Code end here */\r\n  public render(): void {\r\n  this.domElement.innerHTML = `\r\n    <div class=\"${styles.helloWorld}\">\r\n      <p class=\"ms-font-l ms-fontColor-black\">Loading from ${escape(this.context.pageContext.web.title)}</p>\r\n      <div id=\"spListContainer\" />\r\n    </div>`;\r\n  this._renderListAsync();\r\n  }\r\n\r\n  protected get dataVersion(): Version {\r\n    return Version.parse('1.0');\r\n  }\r\n\r\n  protected getPropertyPaneConfiguration(): IPropertyPaneConfiguration {\r\n    return {\r\n      pages: [\r\n        {\r\n          header: {\r\n            description: strings.PropertyPaneDescription\r\n          },\r\n          groups: [\r\n            {\r\n              groupName: strings.BasicGroupName,\r\n              groupFields: [\r\n                PropertyPaneTextField('description', {\r\n                  label: strings.DescriptionFieldLabel\r\n                })\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}